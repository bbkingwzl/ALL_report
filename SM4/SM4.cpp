#include<iostream>
#include<stdint.h>
#include<stdio.h>
#include<time.h>
#include <windows.h>
using namespace std;

#define LITTLE_ENDIAN
#define ENC 0
#define DEC 1
#define SM4_BLOCK_SIZE 16
#define DATA_SIZE  16
//uint8_t Input[16] = {0x01,0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10};
//uint8_t Input[DATA_SIZE] = { 0x12,0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,0x12,0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,0x12,0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,0x12,0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12 };
//uint8_t Key[16] = { 0x01,0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10 };


#define ByteSub(A) (Sbox[(A) >> 24 & 0xFF] << 24 ^ \
                     Sbox[(A) >> 16 & 0xFF] << 16 ^ \
                     Sbox[(A) >>  8 & 0xFF] <<  8 ^ \
                     Sbox[(A) & 0xFF])

#define remove(x,y) (((x)<<(y)) | ((x)>>(32 - y)))

#define T_last(A) (A ^ remove(A,13) ^ remove(A,23))

#define Lun_last(B) (B ^ remove(B,2) ^ remove(B,10) ^ remove(B,18) ^ remove(B,24))

const uint8_t Sbox[256] = {
0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};

const uint32_t CK[32] = {
	0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
	0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
	0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
	0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
	0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
	0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
	0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
	0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279 };

void Key_op(uint8_t* key, uint32_t* rk,int flag)
{
	uint32_t k0, k1, k2, k3,mid_k;
	uint32_t* temp;
	temp = (uint32_t*)key;
	k0 = temp[0];
	k1 = temp[1];
	k2 = temp[2];
	k3 = temp[3];
#ifdef LITTLE_ENDIAN
	k0 = remove(k0, 16); k0 = ((k0 & 0xFF00FF) << 8) ^ ((k0 & 0xFF00FF00) >> 8);
	k1 = remove(k1, 16); k1 = ((k1 & 0xFF00FF) << 8) ^ ((k1 & 0xFF00FF00) >> 8);
	k2 = remove(k2, 16); k2 = ((k2 & 0xFF00FF) << 8) ^ ((k2 & 0xFF00FF00) >> 8);
	k3 = remove(k3, 16); k3 = ((k3 & 0xFF00FF) << 8) ^ ((k3 & 0xFF00FF00) >> 8);
#endif
	k0 ^= 0xa3b1bac6;
	k1 ^= 0x56aa3350;
	k2 ^= 0x677d9197;
	k3 ^= 0xb27022dc;
	for ( int i = 0; i < 32; i+=4)
	{
		mid_k = k1 ^ k2 ^ k3 ^ CK[i];
		mid_k = ByteSub(mid_k);
		k0 ^= T_last(mid_k);
		rk[i] = k0;
		mid_k = k2 ^ k3 ^ k0 ^ CK[i + 1];
		mid_k = ByteSub(mid_k);
		k1 ^= T_last(mid_k);
		rk[i+1] = k1;
		mid_k = k3 ^ k0 ^ k1 ^ CK[i + 2];
		mid_k = ByteSub(mid_k);
		k2 ^= T_last(mid_k);
		rk[i+2] = k2;
		mid_k = k2 ^ k0 ^ k1 ^ CK[i + 3];
		mid_k = ByteSub(mid_k);
		k3 ^= T_last(mid_k);
		rk[i + 3] = k3;
	}
	if (flag == DEC)
	{
		for (int i = 0; i < 16; i++)
			mid_k = rk[i], rk[i] = rk[31 - i], rk[31 - i] = mid_k;
	}
}

void SM4_Enc_Dec(uint8_t* input, uint8_t* output, uint32_t *rk)
{
	uint32_t x0, x1, x2, x3;
	uint32_t* temp;
	temp = (uint32_t*)input;
	x0 = temp[0];
	x1 = temp[1];
	x2 = temp[2];
	x3 = temp[3];
#ifdef LITTLE_ENDIAN
	x0 = remove(x0, 16); x0 = ((x0 & 0x00FF00FF) << 8) ^ ((x0 & 0xFF00FF00) >> 8);
	x1 = remove(x1, 16); x1 = ((x1 & 0x00FF00FF) << 8) ^ ((x1 & 0xFF00FF00) >> 8);
	x2 = remove(x2, 16); x2 = ((x2 & 0x00FF00FF) << 8) ^ ((x2 & 0xFF00FF00) >> 8);
	x3 = remove(x3, 16); x3 = ((x3 & 0x00FF00FF) << 8) ^ ((x3 & 0xFF00FF00) >> 8);
#endif
	for (int i = 0; i < 32; i += 4)
	{
		uint32_t mid_x = x1 ^ x2 ^ x3 ^ rk[i];
		mid_x = ByteSub(mid_x);
		x0 ^= Lun_last(mid_x);
		mid_x = x2 ^ x3 ^ x0 ^ rk[i + 1];
		mid_x = ByteSub(mid_x);
		x1 ^= Lun_last(mid_x);
		mid_x = x3 ^ x0 ^ x1 ^ rk[i + 2];
		mid_x = ByteSub(mid_x);
		x2 ^= Lun_last(mid_x);
		mid_x = x2 ^ x0 ^ x1 ^ rk[i + 3];
		mid_x = ByteSub(mid_x);
		x3 ^= Lun_last(mid_x);
	}
#ifdef LITTLE_ENDIAN
	x0 = remove(x0, 16); x0 = ((x0 & 0x00FF00FF) << 8) ^ ((x0 & 0xFF00FF00) >> 8);
	x1 = remove(x1, 16); x1 = ((x1 & 0x00FF00FF) << 8) ^ ((x1 & 0xFF00FF00) >> 8);
	x2 = remove(x2, 16); x2 = ((x2 & 0x00FF00FF) << 8) ^ ((x2 & 0xFF00FF00) >> 8);
	x3 = remove(x3, 16); x3 = ((x3 & 0x00FF00FF) << 8) ^ ((x3 & 0xFF00FF00) >> 8);
#endif
	temp = (uint32_t*)output;
	temp[0] = x3;
	temp[1] = x2;
	temp[2] = x1;
	temp[3] = x0;
}

void SM4_CBC(uint8_t* In, uint8_t* Out, uint8_t* iv, uint32_t length,int flag, uint32_t* rk)
{
	uint8_t* temp_in = In;
	uint8_t* temp_out = Out;
	uint8_t temp_temp_in[SM4_BLOCK_SIZE] = { 0 };
	uint8_t temp_temp_out[SM4_BLOCK_SIZE] = { 0 };
	uint8_t temp_iv[SM4_BLOCK_SIZE] = {0};
	memcpy(temp_iv, iv, SM4_BLOCK_SIZE);
	if (flag == ENC)
	{
		while (length >= SM4_BLOCK_SIZE)
		{
			for (int i = 0; i < SM4_BLOCK_SIZE; i++)
				temp_temp_in[i] = temp_in[i] ^ temp_iv[i];
			SM4_Enc_Dec(temp_temp_in, temp_out, rk);
			memcpy(temp_iv, temp_out, SM4_BLOCK_SIZE);
			length -= SM4_BLOCK_SIZE;
			temp_in += SM4_BLOCK_SIZE;
			temp_out += SM4_BLOCK_SIZE;
		}
	}
	else
	{
		while (length >= SM4_BLOCK_SIZE)
		{
			SM4_Enc_Dec(temp_in, temp_temp_out, rk);

			for (int i = 0; i < SM4_BLOCK_SIZE; i++)
				temp_out[i] = temp_temp_out[i] ^ temp_iv[i];

			memcpy(temp_iv, temp_in, SM4_BLOCK_SIZE);
			length -= SM4_BLOCK_SIZE;
			temp_in += SM4_BLOCK_SIZE;
			temp_out += SM4_BLOCK_SIZE;
		}
	}
}

int main()
{
	uint8_t Input[DATA_SIZE] = { 0 };
	uint8_t Key[16] = { 0 };
	uint8_t iv[16] = { 0 };
	uint8_t iv1[16] = { 0 };
	for (uint32_t i = 0; i < DATA_SIZE; i++)
	{
		if (i < 16)
		{
			Key[i] = rand() % 100;
			iv[i] = iv1[i] = rand() % 100;
		}
		Input[i] = rand() % 100;
	}
	//for (uint32_t i = 0; i < DATA_SIZE; i++)
	//{
	//	printf("%x", Input[i]);
	//}
	//cout << endl;
	uint8_t output[DATA_SIZE] = { 0 };
	uint8_t output1[DATA_SIZE] = { 0 };
	uint32_t rk[32] = { 0 };
	uint32_t rk1[32] = { 0 };
	LARGE_INTEGER t1, t2, tc;
	QueryPerformanceFrequency(&tc);
	QueryPerformanceCounter(&t1);
	for (int i = 0; i < 100; i++)
	{
		Key_op(Key, rk, ENC);
		SM4_CBC(Input, output, iv, DATA_SIZE, ENC, rk);
		//SM4_Enc_Dec(Input, output, rk);
	}
	for (uint32_t i = 0; i < DATA_SIZE; i++)
		printf("%x", output[i]);
	cout << endl;
	//SM4_Enc_Dec(Input, output,rk);
	QueryPerformanceCounter(&t2);
	printf("CBC ENC Use Time:%fs\n", (t2.QuadPart - t1.QuadPart) * 1.0 /((10.0)* tc.QuadPart));
	LARGE_INTEGER t3, t4, td;
	QueryPerformanceFrequency(&td);
	QueryPerformanceCounter(&t3);
	for (int i = 0; i < 10; i++)
	{
		Key_op(Key, rk1, DEC);
		SM4_CBC(output, output1, iv1, DATA_SIZE, DEC, rk1);
		//SM4_Enc_Dec(output, output1, rk1);
	}
	for (uint32_t i = 0; i < DATA_SIZE; i++)
		printf("%x", output1[i]);
	cout << endl;
	//SM4_Enc_Dec(output, output1,rk1);
	QueryPerformanceCounter(&t4);
	printf("CBC DEC Use Time:%fs", (t4.QuadPart - t3.QuadPart) * 1.0 / ((10.0) * td.QuadPart));
	return 0;
}